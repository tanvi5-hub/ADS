/*
The symbol table is generated by compiler.  From this perspective, the symbol table is a set of name-attribute pairs.  In a symbol table for a compiler, the name is an identifier, and the attributes might include an initial value and a list of lines that use the identifier or type or value. Perform the following operations on symbol table using hashing:
 (1)   Determine if a particular name is in the table
 (2)   Retrieve the attributes of that name 
 (3)   Modify the attributes of that name 
 (4) Insert a new name and its attributes
 (5) Delete a name and its attributes
(use chaining with replacement and without replacement)
*/
#include<iostream>
using namespace std;
class node
{
public:
	string val,key,type;
	int in;

};
class table
{
	node *head[20];
	int n;
public:
	table()
	{
		n=0;	
		for(int i=0;i<20;i++)
		{
			head[i]=NULL;
		}
	}
	void getdata(bool k)
	{
		string val,key,type;
		cout<<"Enter the no of element\n";	
		cin>>n;
		cout<<"Enter the key,type and value\n";
		for(int i=0;i<n;i++)
		{
			cout<<"Key   :   ";
			cin>>key;
			cout<<"type  :   ";
			cin>>type;
			cout<<"Value :   ";
			cin>>val;
			create(key,type,val,k);
		}			
	}	
	int create(string key,string type,string val,bool k)	
	{
		int index=hash(key);
		if(head[index]==NULL)
		{
			head[index]=new node;
			head[index]->key=key;
			head[index]->type=type;
			head[index]->val=val;
			head[index]->in=-1;
			return 1;
		}		
		else
		{
			if(k==0)
			{
				int index1=index;
				while(head[index]!=NULL)
				{
					index=(index+1)%10;
				}
				head[index]=new node;
				head[index]->key=key;
				head[index]->type=type;
				head[index]->val=val;
				head[index]->in=-1;
				head[index1]->in=index;
				return 1;
			}
			if(k==1)
			{
				int key1=(hash(head[index]->key));
				
				if(key1==index)
				{
					int index1=index;
					while(head[index]!=NULL)
					{
						index=(index+1)%10;
					}
					head[index]=new node;
					head[index]->key=key;
					head[index]->type=type;
					head[index]->val=val;
					head[key1]->in=index;
					return 1;
				}
				else
				{
					node *ptr=new node;
					ptr->key=head[index]->key;
					ptr->type=head[index]->type;
					ptr->val=head[index]->val;
					int index1=hash(ptr->key);
					head[index]->key=key;
					head[index]->type=type;
					head[index]->val=val;
					head[index]->in=-1;
					while(head[index]!=NULL)
					{
						index=(index+1)%10;
					}
						head[index]=new node;
						head[index]->key=ptr->key;
						head[index]->type=ptr->type;
						head[index]->val=ptr->val;
						head[index]->in=-1;
						head[index1]->in=index;
				}

			}
		}

	}
	int hash(string key)
	{
		int sum=0;
		/*for(int i=0;i<lenght(key);i++)
		{
			sum+=key[i];
		}
		return (sum)%10;*/
		sum=lenght(key);
		return sum;
	}
	int lenght(string key)
	{
		int count=0,i=0;
		while(key[i]!='\0')
		{
			i++;
			count++;
		}
		return count;
	}
	void display()
	{
		for(int i=0;i<10;i++)
		{
			if(head[i]==NULL)
			{
				cout<<"  NULL\n";
			}
			else
			{
				cout<<head[i]->key<<" "<<head[i]->type<<" "<<head[i]->val<<" "<<head[i]->in<<endl;
			}
		}
	}
	void result()
	{
		int res;
		char ch;
		cout<<"In which mode u want to insert(with or without Replacement)\n";
		cout<<"1.with Replacement\n0.without Replacement\n";
		bool r;
		cin>>r;
		if(r==1)
		{
			 getdata(1);
			 display();
		}
		else
		{
			getdata(0);
 			display();
		}
		do
		{
			cout<<"\nWhich Operation u want to be perform ?\n";
			cout<<"1. Insert the word\n2. Search \n3. Delete the word\n";
        	cin>>res;
        	switch(res)
        	{
        	    case 1:
        	    	   insert_word(r);
				       display();
        	    	   break;
        	    case 2:
                        search();
        	            break;
        	    case 3:
				//		Delete();
						display();
        	    	    break;
        	}
			cout<<"Do you want to continue(y/n)?";
			cin>>ch;
		}while(ch=='y' ||ch=='Y');
	}
	void insert_word(bool k)
	{
		string val,key,type;
		cout<<"Enter the key,type and value\n";
		cout<<"Key   :   ";
		cin>>key;
		cout<<"type  :   ";
		cin>>type;
		cout<<"Value :   ";
		cin>>val;
		create(key,type,val,k);
	}
	int search()
	{
		string key;
		cout<<"Enter the key which u want ot seach\n";
		cin>>key;		
		int index=hash(key);
		if(head[index]->key==key)
		{
			cout<<"key is present\n";
			return 1;
		}
		else
		{
			//int index1=head[index]->in;
			if(head[head[index]->in]->key==key)
			{
 				cout<<"key is present\n";
 				return 1;
			}
			else
			{
				int i=0;
				while(head[index]->key!=key && i!=9)
				{
					index=(index+1)%10;
				}
				if(head[index]->key==key)
				{
					cout<<"key is present\n";
					return 1;
				}
				else
				{
					cout<<"key is not present\n";
					return 0;
				}

			}
		}	

	}

};
int main()
{
	table t;
	t.result();
	return 0;
}
